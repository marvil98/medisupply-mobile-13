name: Android CI - Tests y Cobertura JaCoCo

on:
  pull_request:
    branches:
      - main
      - develop
      - 'feature/**'

jobs:
  test_and_coverage:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      # 1. Configuraci√≥n de Java
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # 2. Permisos de Ejecuci√≥n para Gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 3. üöÄ Ejecuta Tests y VALIDA la Cobertura (80%)
      - name: Run Unit Tests and Validate Coverage (80%)
        # Esta tarea genera el archivo .exec y el reporte XML (necesario para el paso 5)
        run: ./gradlew jacocoTestCoverageVerification

      # 4. Genera el Reporte JaCoCo HTML Report
      # NOTA: Aseg√∫rate de que tu configuraci√≥n de Gradle tambi√©n genere el archivo .xml
      # La tarea jacocoTestReport deber√≠a generarlo por defecto junto al .html
      - name: Generate JaCoCo HTML/XML Report
        run: ./gradlew jacocoTestReport

      # 5. Publica la Cobertura usando una alternativa (simple-elf)
      - name: Publish Code Coverage Summary (Alternative)
        uses: simple-elf/all-in-one-coverage@v3 # ‚¨ÖÔ∏è LA ACCI√ìN ALTERNATIVA
        with:
          # Ruta al archivo XML de JaCoCo que Gradle genera.
          # Esta ruta es est√°ndar despu√©s de ejecutar jacocoTestReport.
          jacoco-coverage-path: app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
          # La acci√≥n autom√°ticamente publica el resultado en el PR.
          
      # 6. Publica el reporte de tests (JUnit XML/HTML)
      - name: Publish JUnit Test Report
        uses: mikepenz/action-junit-report@v4
        if: always() 
        with:
          report_paths: '**/build/test-results/testDebugUnitTest/*.xml'