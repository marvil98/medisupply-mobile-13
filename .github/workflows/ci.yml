name: Android CI - Tests y Cobertura JaCoCo

on:
  pull_request:
    branches:
      # Dispara el CI/CD en PRs dirigidos a estas ramas
      - main
      - develop
      - 'feature/**' 

jobs:
  test_and_coverage:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      # 1. Configuraci√≥n de Java
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # 2. Permisos de Ejecuci√≥n para Gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 3. üöÄ Ejecuta Tests Unitarios
      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest

      # 4. Genera el Reporte JaCoCo HTML y XML
      # El XML es esencial para el paso 6.
      - name: Generate JaCoCo HTML/XML Report
        run: ./gradlew jacocoTestReport

      # 5. VALIDA la Cobertura (80%)
      # Esta tarea falla el build si la cobertura es menor al umbral (configurado en build.gradle)
      - name: Validate Coverage (80%)
        run: ./gradlew jacocoTestCoverageVerification

      # 6. Sube el reporte HTML como Artifact
      - name: Upload JaCoCo HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report-html
          path: app/build/reports/jacoco/jacocoTestReport/html/
          retention-days: 7

      # 7. Publica el Resumen de Cobertura en el PR (Soluci√≥n Robusta)
      # Usa una acci√≥n oficial de GitHub para leer el XML y postear el comentario.
      - name: Publish Code Coverage Summary via Script
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Importa el m√≥dulo para leer archivos del runner
            const fs = require('fs');
            // Lee el contenido del reporte XML generado por Gradle
            const xml = fs.readFileSync('app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml', 'utf8');

            // Expresi√≥n regular para extraer la cobertura de l√≠neas (LINE)
            // Busca <counter type="LINE" missed="[N]" covered="[N]"/>
            const lineCoverageMatch = xml.match(/<counter type="LINE" missed="(\d+)" covered="(\d+)"\/>/);
            
            let comment = "## ‚ö†Ô∏è Resumen de Cobertura JaCoCo\n\nNo se pudo calcular la cobertura de l√≠neas. Verifica el log del build.";
            
            if (lineCoverageMatch) {
              const missedLines = parseInt(lineCoverageMatch[1]);
              const coveredLines = parseInt(lineCoverageMatch[2]);
              const totalLines = missedLines + coveredLines;
              const percentage = ((coveredLines / totalLines) * 100).toFixed(2);
              
              // Define el √≠cono y el mensaje basado en el umbral (80%)
              const icon = percentage >= 80 ? '‚úÖ' : '‚ùå';

              comment = `## ${icon} Cobertura de C√≥digo JaCoCo\n\n` +
                        `| M√©trica | Cobertura | Umbral M√≠nimo |\n` +
                        `| :--- | :---: | :---: |\n` +
                        `| **L√≠neas** | **${percentage}%** | **80.00%** |\n\n` +
                        `_El reporte HTML completo est√° disponible en el panel de **Artifacts**._`;
            }

            // Publica el comentario en el Pull Request
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      # 8. Publica el reporte de tests (JUnit XML/HTML)
      - name: Publish JUnit Test Report
        uses: mikepenz/action-junit-report@v4
        if: always() 
        with:
          report_paths: '**/build/test-results/testDebugUnitTest/*.xml'