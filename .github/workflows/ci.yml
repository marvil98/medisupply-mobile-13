name: Android CI - Tests y Cobertura JaCoCo

on:
  pull_request:
    branches:
      # Dispara el CI/CD en PRs dirigidos a estas ramas
      - main
      - develop
      - 'feature/**' 

jobs:
  test_and_coverage:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      # 1. Configuración de Java
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # 2. Permisos de Ejecución para Gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 3. 🚀 Build con Gradle y Genera Reporte de Cobertura
      - name: Build with Gradle and generate coverage report
        run: ./gradlew clean jacocoTestReport

      # 4. VALIDA la Cobertura (0%)
      # Esta tarea valida la cobertura del código ejecutado
      - name: Validate Coverage (0%)
        run: ./gradlew jacocoTestCoverageVerification

      # 5. Sube el reporte HTML como Artifact
      - name: Upload coverage report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-html-report
          path: app/build/reports/jacoco/jacocoTestReport/html
          retention-days: 7

      # 6. Mostrar Resumen de Cobertura en el Log
      - name: Display Coverage Summary
        run: |
          echo "📊 Verificando reportes de cobertura..."
          
          # Rutas posibles donde puede estar el reporte XML
          POSSIBLE_PATHS=(
            "app/build/reports/coverage/test/debug/report.xml"
            "app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
            "app/build/reports/coverage/debug/jacocoTestReport.xml"
            "app/build/reports/jacoco/testDebugUnitTestCoverage/testDebugUnitTestCoverage.xml"
            "app/build/reports/jacoco/jacocoTestReport.xml"
          )
          
          REPORT_FOUND=false
          for xml_path in "${POSSIBLE_PATHS[@]}"; do
            if [ -f "$xml_path" ]; then
              echo "✅ Reporte encontrado en: $xml_path"
              REPORT_FOUND=true
              
              # Extraer cobertura de líneas
              COVERAGE=$(grep -oP '(?<=<counter type="LINE" missed=")[0-9]+" covered="[0-9]+"' "$xml_path" | awk -F'"' '{missed+=$2; covered+=$4} END {if(covered+missed>0) print covered/(covered+missed)*100; else print 0}')
              COVERAGE=$(printf "%.2f" "$COVERAGE")
              
              echo "📈 Cobertura de líneas: ${COVERAGE}%"
              if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
                echo "✅ Cobertura cumple con el umbral mínimo del 80%"
              else
                echo "❌ Cobertura por debajo del umbral mínimo del 80%"
              fi
              break
            fi
          done
          
          if [ "$REPORT_FOUND" = false ]; then
            echo "⚠️ No se encontró reporte de cobertura en ninguna ubicación esperada"
            echo "📁 Contenido del directorio de reportes:"
            find app/build/reports -name "*.xml" 2>/dev/null || echo "No se encontraron archivos XML"
          fi

      # 7. Publica el reporte de tests (JUnit XML/HTML)
      - name: Publish JUnit Test Report
        uses: mikepenz/action-junit-report@v4
        if: always() 
        with:
          report_paths: '**/build/test-results/testDebugUnitTest/*.xml'