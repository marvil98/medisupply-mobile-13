name: Android CI - Tests y Cobertura JaCoCo

on:
  pull_request:
    branches:
      # Dispara el CI/CD en PRs dirigidos a estas ramas
      - main
      - develop
      - 'feature/**' 

jobs:
  test_and_coverage:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      # 1. Configuraci√≥n de Java
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # 2. Permisos de Ejecuci√≥n para Gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 3. üöÄ Ejecuta Tests Unitarios y Genera Reporte de Cobertura
      - name: Run Unit Tests and Generate Coverage Report
        run: ./gradlew testDebugUnitTest createDebugUnitTestCoverageReport

      # 4. VALIDA la Cobertura (80%)
      # Esta tarea falla el build si la cobertura es menor al umbral (configurado en build.gradle)
      - name: Validate Coverage (80%)
        run: ./gradlew jacocoTestCoverageVerification

      # 5. Sube el reporte HTML como Artifact
      - name: Upload JaCoCo HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report-html
          path: app/build/reports/coverage/debug/
          retention-days: 7

      # 6. Publica el Resumen de Cobertura en el PR (Soluci√≥n Robusta)
      # Usa una acci√≥n oficial de GitHub para leer el XML y postear el comentario.
      - name: Publish Code Coverage Summary via Script
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Importa el m√≥dulo para leer archivos del runner
            const fs = require('fs');
            const path = require('path');
            
            // Rutas posibles donde puede estar el reporte XML
            const possiblePaths = [
              'app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml',
              'app/build/reports/coverage/debug/jacocoTestReport.xml',
              'app/build/reports/jacoco/testDebugUnitTestCoverage/testDebugUnitTestCoverage.xml',
              'app/build/reports/jacoco/jacocoTestReport.xml'
            ];
            
            let xml = null;
            let reportPath = null;
            
            // Busca el archivo XML en las rutas posibles
            for (const xmlPath of possiblePaths) {
              try {
                if (fs.existsSync(xmlPath)) {
                  xml = fs.readFileSync(xmlPath, 'utf8');
                  reportPath = xmlPath;
                  console.log(`Reporte encontrado en: ${xmlPath}`);
                  break;
                }
              } catch (error) {
                console.log(`No se encontr√≥ reporte en: ${xmlPath}`);
              }
            }
            
            let comment = "## ‚ö†Ô∏è Resumen de Cobertura JaCoCo\n\nNo se pudo encontrar el reporte de cobertura. Verifica el log del build.";
            
            if (xml) {
              // Expresi√≥n regular para extraer la cobertura de l√≠neas (LINE)
              const lineCoverageMatch = xml.match(/<counter type="LINE" missed="(\d+)" covered="(\d+)"\/>/);
              
              if (lineCoverageMatch) {
                const missedLines = parseInt(lineCoverageMatch[1]);
                const coveredLines = parseInt(lineCoverageMatch[2]);
                const totalLines = missedLines + coveredLines;
                const percentage = ((coveredLines / totalLines) * 100).toFixed(2);
                
                // Define el √≠cono y el mensaje basado en el umbral (80%)
                const icon = percentage >= 80 ? '‚úÖ' : '‚ùå';

                comment = `## ${icon} Cobertura de C√≥digo JaCoCo\n\n` +
                          `| M√©trica | Cobertura | Umbral M√≠nimo |\n` +
                          `| :--- | :---: | :---: |\n` +
                          `| **L√≠neas** | **${percentage}%** | **80.00%** |\n\n` +
                          `_Reporte generado desde: \`${reportPath}\`_\n` +
                          `_El reporte HTML completo est√° disponible en el panel de **Artifacts**._`;
              } else {
                comment = `## ‚ö†Ô∏è Resumen de Cobertura JaCoCo\n\nSe encontr√≥ el reporte XML pero no se pudo extraer la informaci√≥n de cobertura de l√≠neas.\n_Reporte encontrado en: \`${reportPath}\`_`;
              }
            }

            // Publica el comentario en el Pull Request
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      # 7. Publica el reporte de tests (JUnit XML/HTML)
      - name: Publish JUnit Test Report
        uses: mikepenz/action-junit-report@v4
        if: always() 
        with:
          report_paths: '**/build/test-results/testDebugUnitTest/*.xml'