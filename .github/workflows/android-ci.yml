name: Android CI/CD

on:
  push:
    branches:
      - develop
      - master
      - 'feature/*'
  pull_request:
    branches:
      - develop
      - master
    types: [opened, synchronize, reopened, ready_for_review, closed]

env:
  MIN_COVERAGE: 80
  JAVA_VERSION: 17
  GRADLE_OPTS: -Dorg.gradle.daemon=false

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.coverage-check.outputs.coverage }}
      branch-type: ${{ steps.branch-info.outputs.type }}

    steps:
      - name: üß© Checkout code
        uses: actions/checkout@v4

      - name: üß† Detect branch type
        id: branch-info
        run: |
          if [[ "${{ github.ref_name }}" == "master" ]]; then
            echo "type=master" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "develop" ]]; then
            echo "type=develop" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == feature/* ]]; then
            echo "type=feature" >> $GITHUB_OUTPUT
          else
            echo "type=other" >> $GITHUB_OUTPUT
          fi

      - name: ‚òï Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: üîê Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: üßπ Clean project
        run: ./gradlew clean

      - name: üîé Run Lint
        run: ./gradlew lint

      - name: üß™ Run Unit Tests with Coverage (Kover)
        # Ejecuta pruebas unitarias Kotlin con reporte XML/HTML
        run: ./gradlew testDebugUnitTest koverXmlReport koverHtmlReport

      - name: üìä Check test coverage
        id: coverage-check
        run: |
          echo "üìä Checking coverage..."
          REPORT_FILE="app/build/reports/kover/report.xml"

          # Mostrar archivos de reporte encontrados (para depuraci√≥n)
          find app/build/reports -type f || true

          if [ -f "$REPORT_FILE" ]; then
            echo "‚úÖ Coverage XML found at $REPORT_FILE"
            COVERAGE=$(xmllint --xpath \
              "round(100 * sum(//counter[@type='LINE']/@covered) div sum(//counter[@type='LINE']/(@covered + @missed)))" \
              "$REPORT_FILE" 2>/dev/null || echo 0)
          else
            echo "‚ö†Ô∏è Coverage report not found at ${REPORT_FILE}"
            COVERAGE=0
          fi

          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Coverage: ${COVERAGE}%"

          # Validar umbral m√≠nimo
          if (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
            echo "‚ùå Coverage below ${MIN_COVERAGE}%"
            exit 1
          fi

      - name: üèóÔ∏è Build Debug APK
        run: ./gradlew assembleDebug

      - name: üì¶ Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: app/build/outputs/apk/debug/app-debug.apk

      - name: üì§ Upload coverage report (HTML)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-html
          path: app/build/reports/kover/html

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: üîÑ Checkout code
        uses: actions/checkout@v4

      - name: üöÄ Simulate Deploy (placeholder)
        run: echo "Deploying build from master branch..."

  validate-merge-to-develop:
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'develop'
    runs-on: ubuntu-latest
    steps:
      - name: ‚úÖ Validaci√≥n post-merge a develop
        run: echo "Se ha hecho merge a develop desde ${{ github.event.pull_request.head.ref }}"
